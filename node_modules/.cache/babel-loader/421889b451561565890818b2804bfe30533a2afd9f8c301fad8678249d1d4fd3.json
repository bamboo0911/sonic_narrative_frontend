{"ast":null,"code":"// src/serviceWorkerRegistration.js\n\n// 這段可選的代碼用於註冊 service worker。\n// 預設情況下不會自動呼叫 register()。\n\n// 這將使應用程式在之後的訪問中加載更快，並且具有離線功能。\n// 然而，這也意味著開發者（以及使用者）只有在關閉所有已打開的頁面後，\n// 才能看到已部署的更新，因為先前緩存的資源會在背景中更新。\n\n// 想了解此模式的更多好處和如何選擇加入，請參閱 https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(window.location.hostname === 'localhost' ||\n// [::1] 是 IPv6 本地主機地址。\nwindow.location.hostname === '[::1]' ||\n// 127.0.0.0/8 被認為是 IPv4 的本地主機。\nwindow.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}$/));\n\n// 用於註冊 service worker 的函數\nexport function register(config) {\n  // 僅在生產環境中註冊 service worker\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // 使用 PUBLIC_URL 環境變數創建一個 URL 物件\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n\n    // 如果 service worker 的 URL 與應用程式的來源不同，則退出函數\n    if (publicUrl.origin !== window.location.origin) {\n      return;\n    }\n\n    // 在頁面加載後註冊 service worker\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n      if (isLocalhost) {\n        // 如果正在本地運行，檢查是否仍有 service worker 存在\n        checkValidServiceWorker(swUrl, config);\n\n        // 當在本地運行時，為開發者提供有用的日誌資訊\n        navigator.serviceWorker.ready.then(() => {\n          console.log('這個網頁應用程式正由 service worker 提供緩存優先的服務。' + '如需了解更多資訊，請參閱 https://bit.ly/CRA-PWA');\n        });\n      } else {\n        // 如果不是本地主機，則直接註冊 service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\n// 註冊有效的 service worker 的函數\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker.register(swUrl).then(registration => {\n    registration.onupdatefound = () => {\n      const installingWorker = registration.installing;\n      if (installingWorker == null) {\n        return;\n      }\n      installingWorker.onstatechange = () => {\n        if (installingWorker.state === 'installed') {\n          if (navigator.serviceWorker.controller) {\n            // 新內容已可用；在關閉所有頁籤後將被使用\n            console.log('新內容已可用，當所有該頁面的頁籤被關閉後將被使用。詳情參閱 https://bit.ly/CRA-PWA.');\n\n            // 如果提供了更新回調函數，則執行\n            if (config && config.onUpdate) {\n              config.onUpdate(registration);\n            }\n          } else {\n            // 所有內容已被緩存以供離線使用\n            console.log('內容已被緩存以供離線使用。');\n\n            // 如果提供了成功回調函數，則執行\n            if (config && config.onSuccess) {\n              config.onSuccess(registration);\n            }\n          }\n        }\n      };\n    };\n  }).catch(error => {\n    console.error('註冊 service worker 時出錯:', error);\n  });\n}\n\n// 檢查是否存在有效的 service worker 的函數\nfunction checkValidServiceWorker(swUrl, config) {\n  // 檢查是否可以找到 service worker。如果找不到，重新加載頁面。\n  fetch(swUrl, {\n    headers: {\n      'Service-Worker': 'script'\n    }\n  }).then(response => {\n    // 確保 service worker 存在，並且我們獲取到的確實是 JS 文件。\n    const contentType = response.headers.get('content-type');\n    if (response.status === 404 || contentType != null && contentType.indexOf('javascript') === -1) {\n      // 沒有找到 service worker。可能是不同的應用程式。重新加載頁面。\n      navigator.serviceWorker.ready.then(registration => {\n        registration.unregister().then(() => {\n          window.location.reload();\n        });\n      });\n    } else {\n      // 找到 service worker，正常繼續註冊。\n      registerValidSW(swUrl, config);\n    }\n  }).catch(() => {\n    console.log('未發現網路連線。應用程式正在離線模式下運行。');\n  });\n}\n\n// 用於註銷 service worker 的函數\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    }).catch(error => {\n      console.error(error.message);\n    });\n  }\n}","map":{"version":3,"names":["isLocalhost","Boolean","window","location","hostname","match","register","config","process","env","NODE_ENV","navigator","publicUrl","URL","PUBLIC_URL","href","origin","addEventListener","swUrl","checkValidServiceWorker","serviceWorker","ready","then","console","log","registerValidSW","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","fetch","headers","response","contentType","get","status","indexOf","unregister","reload","message"],"sources":["/home/bamboo0911/my-pwa-app/frontend/src/serviceWorkerRegistration.js"],"sourcesContent":["// src/serviceWorkerRegistration.js\r\n\r\n// 這段可選的代碼用於註冊 service worker。\r\n// 預設情況下不會自動呼叫 register()。\r\n\r\n// 這將使應用程式在之後的訪問中加載更快，並且具有離線功能。\r\n// 然而，這也意味著開發者（以及使用者）只有在關閉所有已打開的頁面後，\r\n// 才能看到已部署的更新，因為先前緩存的資源會在背景中更新。\r\n\r\n// 想了解此模式的更多好處和如何選擇加入，請參閱 https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] 是 IPv6 本地主機地址。\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 被認為是 IPv4 的本地主機。\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}$/\r\n    )\r\n);\r\n\r\n// 用於註冊 service worker 的函數\r\nexport function register(config) {\r\n  // 僅在生產環境中註冊 service worker\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // 使用 PUBLIC_URL 環境變數創建一個 URL 物件\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n\r\n    // 如果 service worker 的 URL 與應用程式的來源不同，則退出函數\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      return;\r\n    }\r\n\r\n    // 在頁面加載後註冊 service worker\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // 如果正在本地運行，檢查是否仍有 service worker 存在\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // 當在本地運行時，為開發者提供有用的日誌資訊\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            '這個網頁應用程式正由 service worker 提供緩存優先的服務。' +\r\n              '如需了解更多資訊，請參閱 https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // 如果不是本地主機，則直接註冊 service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\n// 註冊有效的 service worker 的函數\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // 新內容已可用；在關閉所有頁籤後將被使用\r\n              console.log(\r\n                '新內容已可用，當所有該頁面的頁籤被關閉後將被使用。詳情參閱 https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // 如果提供了更新回調函數，則執行\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // 所有內容已被緩存以供離線使用\r\n              console.log('內容已被緩存以供離線使用。');\r\n\r\n              // 如果提供了成功回調函數，則執行\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('註冊 service worker 時出錯:', error);\r\n    });\r\n}\r\n\r\n// 檢查是否存在有效的 service worker 的函數\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // 檢查是否可以找到 service worker。如果找不到，重新加載頁面。\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // 確保 service worker 存在，並且我們獲取到的確實是 JS 文件。\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // 沒有找到 service worker。可能是不同的應用程式。重新加載頁面。\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // 找到 service worker，正常繼續註冊。\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('未發現網路連線。應用程式正在離線模式下運行。');\r\n    });\r\n}\r\n\r\n// 用於註銷 service worker 的函數\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}