{"ast":null,"code":"var _jsxFileName = \"/home/bamboo0911/my-pwa-app/frontend/src/components/RecordingPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef } from 'react';\nimport '.././App.css'; // 確保引入了App.css\n\n// 定義RecordingPage組件\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RecordingPage = () => {\n  _s();\n  const [isRecording, setIsRecording] = useState(false); // 用來指示是否正在錄音\n  const [audioURL, setAudioURL] = useState(''); // 用來存儲錄音完成後的音頻URL\n  const [timeLeft, setTimeLeft] = useState(30); // 用來控制錄音的倒數計時，初始化為30秒\n  const mediaRecorderRef = useRef(null); // 用於存放MediaRecorder對象的引用\n  const timeoutRef = useRef(null); // 用於存放錄音時間限制的計時器引用\n  const intervalRef = useRef(null); // 用於存放倒數計時的計時器引用\n\n  // 開始錄音功能\n  const startRecording = () => {\n    setIsRecording(true); // 將錄音狀態設置為true，表示開始錄音\n    setTimeLeft(30); // 重置倒數計時為30秒\n\n    // 請求用戶的音頻媒體（麥克風）\n    navigator.mediaDevices.getUserMedia({\n      audio: true\n    }).then(stream => {\n      // 創建一個MediaRecorder對象來記錄音頻\n      mediaRecorderRef.current = new MediaRecorder(stream);\n      mediaRecorderRef.current.start(); // 開始錄音\n      const audioChunks = []; // 用來存放錄音片段的數組\n\n      // 當有音頻數據可用時，將其加入到audioChunks數組中\n      mediaRecorderRef.current.addEventListener(\"dataavailable\", event => {\n        audioChunks.push(event.data);\n      });\n\n      // 當錄音停止時，將錄音片段合併為一個Blob，並生成URL\n      mediaRecorderRef.current.addEventListener(\"stop\", () => {\n        const audioBlob = new Blob(audioChunks); // 創建音頻Blob\n        const audioUrl = URL.createObjectURL(audioBlob); // 為Blob生成URL\n        setAudioURL(audioUrl); // 將生成的URL保存到狀態中\n      });\n\n      // 設置一個計時器，30秒後自動停止錄音\n      timeoutRef.current = setTimeout(() => {\n        stopRecording(); // 調用stopRecording函數來停止錄音\n      }, 30000); // 30000毫秒 = 30秒\n    }).catch(error => {\n      if (error.name === 'NotAllowedError' || error.name === 'PermissionDeniedError') {\n        alert('Please allow microphone access to use the recording feature.');\n      } else {\n        console.error('Error accessing microphone: ', error);\n      }\n    });\n\n    // 每秒更新一次倒數計時\n    intervalRef.current = setInterval(() => {\n      setTimeLeft(prev => {\n        if (prev > 1) {\n          return prev - 1; // 每次減少1秒\n        } else {\n          clearInterval(intervalRef.current); // 如果計時器結束，清除計時器\n          return 0; // 計時器歸零\n        }\n      });\n    }, 1000); // 每1000毫秒 = 1秒\n  };\n\n  // 停止錄音功能\n  const stopRecording = () => {\n    setIsRecording(false); // 將錄音狀態設置為false，表示停止錄音\n    if (mediaRecorderRef.current && mediaRecorderRef.current.state !== \"inactive\") {\n      mediaRecorderRef.current.stop(); // 停止錄音\n    }\n    clearTimeout(timeoutRef.current); // 清除時間限制計時器\n    clearInterval(intervalRef.current); // 清除倒數計時計時器\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Recording Page\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), isRecording && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        color: 'red',\n        fontWeight: 'bold'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        style: {\n          marginRight: '10px',\n          animation: 'blink 1s infinite'\n        },\n        children: \"\\u25CF \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 11\n      }, this), \"Recording... \", timeLeft, \" seconds left \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: startRecording,\n      disabled: isRecording,\n      children: \"Start Recording\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: stopRecording,\n      disabled: !isRecording,\n      children: \"Stop Recording\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), audioURL && /*#__PURE__*/_jsxDEV(\"audio\", {\n      src: audioURL,\n      controls: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 20\n    }, this), audioURL && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: '20px'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => alert(\"Send button clicked! (functionality pending)\"),\n        disabled: isRecording,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: '20px'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"a\", {\n        href: \"/\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          children: \"Back to Main Page\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n};\n\n// 添加CSS動畫，用於實現紅色圓點的閃爍效果\n_s(RecordingPage, \"xOL4SvJTKyupaQ96yc1ahqbfjlw=\");\n_c = RecordingPage;\nconst style = document.createElement('style');\nstyle.type = 'text/css';\nstyle.innerHTML = `\n  @keyframes blink {\n    0% { opacity: 1; }\n    50% { opacity: 0; }\n    100% { opacity: 1; }\n  }\n`;\ndocument.getElementsByTagName('head')[0].appendChild(style);\nexport default RecordingPage;\nvar _c;\n$RefreshReg$(_c, \"RecordingPage\");","map":{"version":3,"names":["React","useState","useRef","jsxDEV","_jsxDEV","RecordingPage","_s","isRecording","setIsRecording","audioURL","setAudioURL","timeLeft","setTimeLeft","mediaRecorderRef","timeoutRef","intervalRef","startRecording","navigator","mediaDevices","getUserMedia","audio","then","stream","current","MediaRecorder","start","audioChunks","addEventListener","event","push","data","audioBlob","Blob","audioUrl","URL","createObjectURL","setTimeout","stopRecording","catch","error","name","alert","console","setInterval","prev","clearInterval","state","stop","clearTimeout","children","fileName","_jsxFileName","lineNumber","columnNumber","style","color","fontWeight","marginRight","animation","onClick","disabled","src","controls","marginTop","href","_c","document","createElement","type","innerHTML","getElementsByTagName","appendChild","$RefreshReg$"],"sources":["/home/bamboo0911/my-pwa-app/frontend/src/components/RecordingPage.js"],"sourcesContent":["import React, { useState, useRef } from 'react';\r\nimport '.././App.css';  // 確保引入了App.css\r\n\r\n// 定義RecordingPage組件\r\nconst RecordingPage = () => {\r\n  const [isRecording, setIsRecording] = useState(false); // 用來指示是否正在錄音\r\n  const [audioURL, setAudioURL] = useState(''); // 用來存儲錄音完成後的音頻URL\r\n  const [timeLeft, setTimeLeft] = useState(30); // 用來控制錄音的倒數計時，初始化為30秒\r\n  const mediaRecorderRef = useRef(null); // 用於存放MediaRecorder對象的引用\r\n  const timeoutRef = useRef(null); // 用於存放錄音時間限制的計時器引用\r\n  const intervalRef = useRef(null); // 用於存放倒數計時的計時器引用\r\n\r\n  // 開始錄音功能\r\n  const startRecording = () => {\r\n    setIsRecording(true); // 將錄音狀態設置為true，表示開始錄音\r\n    setTimeLeft(30); // 重置倒數計時為30秒\r\n    \r\n    // 請求用戶的音頻媒體（麥克風）\r\n    navigator.mediaDevices.getUserMedia({ audio: true })\r\n      .then(stream => {\r\n        // 創建一個MediaRecorder對象來記錄音頻\r\n        mediaRecorderRef.current = new MediaRecorder(stream);\r\n        mediaRecorderRef.current.start(); // 開始錄音\r\n        const audioChunks = []; // 用來存放錄音片段的數組\r\n\r\n        // 當有音頻數據可用時，將其加入到audioChunks數組中\r\n        mediaRecorderRef.current.addEventListener(\"dataavailable\", event => {\r\n          audioChunks.push(event.data);\r\n        });\r\n\r\n        // 當錄音停止時，將錄音片段合併為一個Blob，並生成URL\r\n        mediaRecorderRef.current.addEventListener(\"stop\", () => {\r\n          const audioBlob = new Blob(audioChunks); // 創建音頻Blob\r\n          const audioUrl = URL.createObjectURL(audioBlob); // 為Blob生成URL\r\n          setAudioURL(audioUrl); // 將生成的URL保存到狀態中\r\n        });\r\n\r\n        // 設置一個計時器，30秒後自動停止錄音\r\n        timeoutRef.current = setTimeout(() => {\r\n          stopRecording(); // 調用stopRecording函數來停止錄音\r\n        }, 30000); // 30000毫秒 = 30秒\r\n      })\r\n      .catch(error => {\r\n        if (error.name === 'NotAllowedError' || error.name === 'PermissionDeniedError') {\r\n          alert('Please allow microphone access to use the recording feature.');\r\n        } else {\r\n          console.error('Error accessing microphone: ', error);\r\n        }\r\n      });\r\n\r\n    // 每秒更新一次倒數計時\r\n    intervalRef.current = setInterval(() => {\r\n      setTimeLeft(prev => {\r\n        if (prev > 1) {\r\n          return prev - 1; // 每次減少1秒\r\n        } else {\r\n          clearInterval(intervalRef.current); // 如果計時器結束，清除計時器\r\n          return 0; // 計時器歸零\r\n        }\r\n      });\r\n    }, 1000); // 每1000毫秒 = 1秒\r\n  };\r\n\r\n  // 停止錄音功能\r\n  const stopRecording = () => {\r\n    setIsRecording(false); // 將錄音狀態設置為false，表示停止錄音\r\n    if (mediaRecorderRef.current && mediaRecorderRef.current.state !== \"inactive\") {\r\n      mediaRecorderRef.current.stop(); // 停止錄音\r\n    }\r\n    clearTimeout(timeoutRef.current); // 清除時間限制計時器\r\n    clearInterval(intervalRef.current); // 清除倒數計時計時器\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>Recording Page</h1>\r\n\r\n      {/* 錄音狀態指示，當錄音中時顯示紅色圓點和倒數計時 */}\r\n      {isRecording && (\r\n        <div style={{ color: 'red', fontWeight: 'bold' }}>\r\n          <span style={{ marginRight: '10px', animation: 'blink 1s infinite' }}>\r\n            ● {/* 紅色圓點，使用CSS動畫來實現閃爍效果 */}\r\n          </span>\r\n          Recording... {timeLeft} seconds left {/* 顯示剩餘錄音時間 */}\r\n        </div>\r\n      )}\r\n\r\n      {/* 錄音控制按鈕 */}\r\n      <button onClick={startRecording} disabled={isRecording}>Start Recording</button>\r\n      {/* 當錄音中時，禁用開始按鈕 */}\r\n      <button onClick={stopRecording} disabled={!isRecording}>Stop Recording</button>\r\n      {/* 當未錄音時，禁用停止按鈕 */}\r\n\r\n      {/* 錄音完成後的音頻回放 */}\r\n      {audioURL && <audio src={audioURL} controls />}\r\n      {/* 當有音頻URL時顯示音頻播放器 */}\r\n\r\n      {/* Send 按鈕 */}\r\n      {audioURL && (\r\n        <div style={{ marginTop: '20px' }}>\r\n          <button onClick={() => alert(\"Send button clicked! (functionality pending)\")} disabled={isRecording}>\r\n            Send\r\n          </button>\r\n          {/* 當有音頻URL且未錄音時顯示Send按鈕，目前按鈕的功能是顯示一個提示框 */}\r\n        </div>\r\n      )}\r\n\r\n      {/* 返回主頁按鈕 */}\r\n      <div style={{ marginTop: '20px' }}>\r\n        <a href=\"/\">\r\n          <button>Back to Main Page</button>\r\n        </a>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n// 添加CSS動畫，用於實現紅色圓點的閃爍效果\r\nconst style = document.createElement('style');\r\nstyle.type = 'text/css';\r\nstyle.innerHTML = `\r\n  @keyframes blink {\r\n    0% { opacity: 1; }\r\n    50% { opacity: 0; }\r\n    100% { opacity: 1; }\r\n  }\r\n`;\r\ndocument.getElementsByTagName('head')[0].appendChild(style);\r\n\r\nexport default RecordingPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}